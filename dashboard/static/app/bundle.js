!function(t,e){"use strict";var a=function(t,e){var a=t/e*100;return Math.round(10*a)/10},r=function(t){var e=(t=t.toString()).substr(2,2);return["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sept","Oct","Nov","Dec"][Number(t.substr(4,2))]+"'"+e},n=function(t){var e=(t=t.toString()).substr(0,4);return["","January","February","March","April","May","June","July","August","September","October","November","December"][Number(t.substr(4,2))]+" "+e},i=function(t,e){return"CY"==e?["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sept","Oct","Nov","Dec"][t]:["","Jul","Aug","Sept","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun"][t]},o=function(t,e){return e<10?t+"0"+e:t+""+e},c=function(t,e){t=t.toString();var a=Number(t.substr(4,2));return"CY"==e?a:a>=7?Math.abs(a-7)+1:a+6},s=function(t,e){return t=t.toString(),Number(t.substr(4,2))},l=function(t,e){return t=t.toString(),Number(t.substr(0,4))},d=function(t,e){var a=(t=t.toString()).substr(0,4),r=Number(t.substr(4,2));if("CY"==e)return a;if("FY"==e){if(r<=6){return Number(a)-1+"-"+a}return a+"-"+(Number(a)+1)}};!function(t){angular.extend(t,{per:a,generateLabelFromPeriod:r,generateFullLabelFromPeriod:n,getPeriodString:o,getYearLabelFromPeriod:d,getMonthFromPeriod:s,getYearFromPeriod:l,getMonthIndexFromPeriod:c,getMonthFromNumber:i})}(t.appHelpers||(t.appHelpers={}))}(window,document),window.angular.module("services").service("AnnualService",["$http",function(t){var e=function(t){return t.data};return{getAwpActivities:function(a){return t.get("planning/api/awpactivities",{params:{year:a}}).then(e)},getFundActivities:function(a){return t.get("planning/api/fundactivities",{params:{year:a}}).then(e)},getPriorityActivities:function(a){return t.get("planning/api/priorityactivities",{params:{year:a}}).then(e)}}}]),function(t){window.angular.module("services").service("ChartPDFExport",function(){return{export:function(t){d3.selectAll("svg .nv-line").style("fill","#ffffff").style("fill-opacity",0),d3.selectAll(".nvd3 .nv-background").style("fill","#ffffff").style("fill-opacity",0),d3.selectAll(".nvd3 .nv-axis line").style("stroke","#e5e5e5"),d3.selectAll(".nvd3 text").style("font","normal 13px Arial, sans-serif"),d3.selectAll(".nvd3 .nv-groups .nv-point").style("fill-opacity",0).style("stroke-width","0px"),d3.selectAll(".nvd3 .nv-y .zero line").style("stroke","#404040"),d3.selectAll(".nv-y .nv-axis g path.domain").style("stroke","#404040"),d3.selectAll(".legendQuant .label").style("font","normal 12px Arial, sans-serif");var e=new jsPDF("l","mm");e.addHTML(document.getElementById("pdfReport"),0,0,{format:"PNG"},function(){e.save(t)})}}})}(),function(t){window.angular.module("services").service("ChartSupportService",function(){function t(){d3.selectAll(".nv-multibar .nv-group").each(function(t){var e=d3.select(this);e.selectAll("text").remove(),e.selectAll(".nv-bar").each(function(t){var a=d3.select(this),r=a.attr("width");a.attr("height"),e.append("text").attr("transform",a.attr("transform")).text(function(){return parseFloat(t.y).toFixed(0)}).attr("y",function(){return this.getBBox().height,parseFloat(a.attr("y"))-10}).attr("x",function(){var t=this.getBBox().width;return parseFloat(a.attr("x"))+parseFloat(r)/2-t/2}).attr("class","bar-values")})})}return{getOptions:function(e){return{chart:{type:e,height:450,width:650,stacked:!1,showControls:!1,groupSpacing:.2,clipEdge:!1,interactiveLayer:{gravity:"s"},x:function(t){return t.x},y:function(t){return t.y},forceY:[0,110],xAxis:{axisLabel:"Years",tickFormat:function(t){return t}},yAxis:{axisLabel:"Coverage Rate (%)",ticks:10},dispatch:{renderEnd:function(){t()}},callback:function(t){},legend:{dispatch:{stateChange:function(){}}}}}},initLabels:t,clearLabels:function(){d3.selectAll(".nv-multibar .nv-group").each(function(t){d3.select(this).selectAll("text").remove()})}}})}(),function(t){window.angular.module("services").service("CoverageCalculator",function(){function t(t,e){return Math.round(t/e*100)}function e(t,e){return Math.round((t-e)/t*100)}return{calculateCoverageRate:t,calculateDropoutRate:e,calculateRedCategory:function(a,r,n){var i=t(a,n),o=e(a,r);return i>=90&&o>=0&&o<=10?1:i>=90&&(o<0||o>10)?2:i<90&&o>=0&&o<=10?3:i<90&&(o<0||o>10)?4:0}}})}(),window.angular.module("services").service("CoverageService",["$http",function(t){var e=function(t){return t.data};return{getDHIS2VaccineDoses:function(a,r,n){return t.get("coverage/api/dhis2vaccinedoses",{params:{period:a,vaccine:n,district:r}}).then(e)},getVaccineDoses:function(a,r){return t.get("coverage/api/vaccinedoses",{params:{period:a,vaccine:r}}).then(e)},getVaccineDosesByDistrict:function(a,r,n){return t.get("coverage/api/vaccinedoses",{params:{period:a,vaccine:n,district:r}}).then(e)},getVaccineDosesByPeriod:function(a){return t.get("coverage/api/vaccinedoses_by_period",{params:{startYear:a.startYear,endYear:a.endYear,vaccine:a.antigen,period:a.period,dose:a.dose,district:a.district,dataType:a.dataType,enableDistrictGrouping:a.enableDistrictGrouping}}).then(e)},getUnepiCoverage:function(a,r){return t.get("coverage/api/coverageannualized",{params:{period:a,district:r}}).then(e)},getDistrictMap:function(){return t.get("static/Uganda_admin.json").then(e)},getRedVaccineDoses:function(a,r){return t.get("coverage/api/vaccinedoses",{params:{period:a,vaccine:r}}).then(e)}}}]),function(t){t.module("services").service("FilterService",["$http",function(t){var e=function(t){return t.data};return{getMonths:function(){return t.get("/api/months").then(e)},getYear:function(){return t.get("planning/api/activityyear").then(e)},getVaccines:function(){return t.get("/api/vaccines/").then(e)},getDistricts:function(){return t.get("/api/districts").then(e)},getFridgeDistricts:function(){return t.get("coldchain/api/districts").then(e)},getFridgeCareLevels:function(){return t.get("coldchain/api/carelevels").then(e)},getFridgeQuarters:function(){return t.get("coldchain/api/quarters").then(e)},getLastPeriod:function(){return t.get("/api/lastperiod").then(e)},getPeriodRanges:function(){return t.get("coverage/api/period_ranges").then(e)},getAwpActivities:function(){return t.get("planning/api/awpactivities").then(e)},getFundActivities:function(){return t.get("planning/api/fundactivities").then(e)},getUnepiCoverage:function(){return t.get("coverage/api/coverageannualized").then(e)},getUnepiStock:function(){return t.get("api/stock/athandbydistrict").then(e)}}}]),t.module("services").service("MonthService",[function(){var t=function(t){var e={};return e.Jan=1,e.Feb=2,e.Mar=3,e.Apr=4,e.May=5,e.Jun=6,e.Jul=7,e.Aug=8,e.Sep=9,e.Oct=10,e.Nov=11,e.Dec=12,e[t]},e=function(e){var a=e.split(" "),r=t(a[0]),n=parseInt(a[1]);return new Date(n,r,1)};return monthDiff=function(t,e){var a;return a=12*(e.getFullYear()-t.getFullYear()),a-=t.getMonth()+1,(a+=e.getMonth())<=0?0:a},monthRangeDiff=function(t,a){return monthDiff(e(t),e(a))},{getMonthName:function(t){var e={};return e[1]="Jan",e[2]="Feb",e[3]="Mar",e[4]="Apr",e[5]="May",e[6]="Jun",e[7]="Jul",e[8]="Aug",e[9]="Sep",e[10]="Oct",e[11]="Nov",e[12]="Dec",e[t]},getMonthNumber:t,monthToDate:e,monthDiff:monthDiff,monthRangeDiff:monthRangeDiff}}])}(window.angular),window.angular.module("services").service("FridgeService",["$http",function(t){var e=function(t){return t.data};return{getFridgeCapacity:function(a,r,n,i){return t.get("coldchain/api/capacities",{params:{startQuarter:a,endQuarter:r,district:n,carelevel:i}}).then(e)},getFridgeDistrictCapacity:function(a,r,n,i){return t.get("coldchain/api/districtcapacities",{params:{startQuarter:a,endQuarter:r,district:n,carelevel:i}}).then(e)},getFridgeFacilityCapacity:function(a,r,n,i){return t.get("coldchain/api/facilitycapacities",{params:{startQuarter:a,endQuarter:r,district:n,carelevel:i}}).then(e)},getFridgeFunctionality:function(a,r,n,i){return t.get("coldchain/api/refrigerators",{params:{startQuarter:a,endQuarter:r,district:n,carelevel:i}}).then(e)},getFridgeImmunizingFacility:function(a,r,n,i){return t.get("coldchain/api/immunizingfacilities",{params:{startQuarter:a,endQuarter:r,district:n,carelevel:i}}).then(e)},getFridgeDistrictRefrigerator:function(a,r,n,i){return t.get("coldchain/api/districtrefrigerators",{params:{startQuarter:a,endQuarter:r,district:n,carelevel:i}}).then(e)},getFridgeFacilityRefrigerator:function(a,r,n,i){return t.get("coldchain/api/facilityrefrigerators",{params:{startQuarter:a,endQuarter:r,district:n,carelevel:i}}).then(e)},getFridgeDistrictImmunizingFacility:function(a,r,n,i){return t.get("coldchain/api/districtimmunizingfacilities",{params:{startQuarter:a,endQuarter:r,district:n,carelevel:i}}).then(e)},getFridgeCapacityMetrics:function(t){for(var e=0,a=0,r=0,n=0;n<t.length;n++){var i=t[n].surplus;i>30?e++:i<30&&i>=0?a++:i<0&&r++}return{surplus:e,sufficient:a,shortage:r,total:e+a+r}}}}]),window.angular.module("dashboard").controller("MainController",["$scope","FilterService","MonthService","$rootScope","$location",function(t,e,a,r,n){t.sortType="name",t.sortReverse=!1,t.searchText="",t.root={};var i=this;i.startMonth=i.startMonth?i.startMonth.name:"Nov 2015",i.endMonth=i.endMonth?i.endMonth.name:"Dec 2015",i.selectedVaccine="",i.selectedDistrict="",i.defaultPeriod="",e.getMonths().then(function(t){i.months=t,i.startMonth=i.months[0]});i.updateDoses=function(){i.dose=void 0,i.doses=["Dose 1","Dose 2","Dose 3"],0!=i.doses.length&&(i.dose=i.doses[i.doses.length-1])},i.antigens=Object.keys({ALL:[],HPV:["HPV1","HPV2"],DPT:["DPT1","DPT2","DPT3"],PCV:["PCV1","PCV2","PCV3"],IPV:[],OPV:["OPV1","OPV2","OPV3"],BCG:[],MEASLES:[],TT:["TT1","TT2"]}),"/coverage/redcategory"==n.path()?i.antigen="DPT":i.antigen="ALL",i.updateDoses(),e.getPeriodRanges().then(function(t){i.coverageYears=t.years,i.startYear=t.years[t.years.length-1],i.endYear=t.years[t.years.length-1],i.activeCoverageYear=t.years[t.years.length-1]});new Date;e.getLastPeriod().then(function(e){i.defaultPeriod=e,i.defaultMonth=parseInt(e.period.toString().substring(4,6)),t.defaultMonth=i.defaultMonth,t.defaultPeriod=e.period.toString();var r=e.period.toString(),n=parseInt(r.substring(4,6)),o=(a.getMonthName(n),0);for(var c in i.months)if(i.months[c].period==r){i.endMonth=i.months[c],o=c;break}var s=o-6+1;s<0&&(s=0),void 0!=i.months&&(i.startMonth=i.months[s])}),i.stockathand=0,e.getDistricts().then(function(t){-1==["/stock/distribution"].indexOf(n.path())&&t.unshift({name:"National"}),i.districts=t,i.selectedDistrict=i.districts[0],i.district=i.districts[0].name}),e.getVaccines().then(function(t){i.vaccines=t,i.selectedVaccine=i.vaccines[5]}),i.selectedYear="",e.getYear().then(function(t){i.years=t,i.selectedYear=i.years[0]}),i.startQuarter=i.startQuarter?i.startQuarter.name:"201601",i.endQuarter=i.endQuarter?i.endQuarter.name:"201603",i.selectedFridgeDistrict="",i.selectedFridgeCareLevel="",e.getFridgeDistricts().then(function(t){i.fridgeDistricts=t,i.selectedFridgeDistrict=i.fridgeDistricts[0]}),e.getFridgeCareLevels().then(function(t){i.fridgeCareLevels=t}),e.getFridgeQuarters().then(function(t){i.fridgeQuarters=t}),t.$watchGroup(["shell.endMonth","shell.selectedVaccine","shell.selectedDistrict"],function(t){t[0]&&t[1]&&t[2]&&i.endMonth&&r.$broadcast("refresh",i.startMonth,i.endMonth,i.selectedDistrict,i.selectedVaccine)}),t.$watchGroup(["shell.startYear","shell.endYear","shell.activeCoverageYear","shell.antigen","shell.dose","shell.district"],function(t){t[0]&&i.endMonth&&(r.$broadcast("refreshCoverage2",i.endMonth,i.startYear,i.endYear,i.activeCoverageYear,i.antigen,i.dose,i.district),r.$broadcast("refreshCoverage3",{endMonth:i.endMonth,startYear:i.startYear,endYear:i.endYear,activeCoverageYear:i.activeCoverageYear,antigen:i.antigen,dose:i.dose,district:i.district}))},!0),t.$watch("shell.endQuarter",function(){i.endQuarter&&r.$broadcast("refreshCapacity",i.startQuarter,i.endQuarter,i.selectedFridgeDistrict,i.selectedFridgeCareLevel)},!0),t.$watchGroup(["shell.endQuarter","shell.selectedFridgeDistrict","shell.selectedFridgeCareLevel"],function(t){t[0]&&t[1]&&i.endQuarter&&i.selectedFridgeDistrict&&r.$broadcast("refreshCapacity",i.startQuarter,i.endQuarter,i.selectedFridgeDistrict,i.selectedFridgeCareLevel)}),t.$watch("shell.years",function(){i.selectedYear&&r.$broadcast("refreshAwp",i.selectedYear)},!0),t.$watchGroup(["shell.years"],function(t){t[0]&&t[1]&&i.selectedYear&&r.$broadcast("refreshAwp",i.selectedYear)}),t.$watch("shell.coveragePeriod",function(){i.coveragePeriod&&r.$broadcast("refreshCoverage",i.coveragePeriod,i.selectedDistrict,i.selectedVaccine)},!0),t.$watchGroup(["shell.coveragePeriod","shell.selectedDistrict","shell.selectedVaccine"],function(t){t[0]&&t[1]&&t[2]&&i.coveragePeriod&&r.$broadcast("refreshCoverage",i.coveragePeriod,i.selectedDistrict,i.selectedVaccine)}),t.$watch("shell.coveragePeriod",function(){i.coveragePeriod&&i.selectedDistrict&&r.$broadcast("refreshUnepi",i.coveragePeriod,i.selectedDistrict,i.selectedVaccine)},!0),t.$watchGroup(["shell.coveragePeriod","shell.selectedDistrict","shell.selectedVaccine"],function(t){t[0]&&t[1]&&t[2]&&i.coveragePeriod&&i.selectedDistrict&&r.$broadcast("refreshUnepi",i.coveragePeriod,i.selectedDistrict,i.selectedVaccine)})}]),window.angular.module("services").service("MapSupportService",[function(){function t(t,e){return e.reduce(function(e,a){if(void 0==t||void 0==t[a[0]]||void 0==t[a[0]][a[1]])return e;var r=t[a[0]][a[1]];return e.totalPlanned+=r.planned,e.totalFirstDose+=r.first_dose,e.totalSecondDose+=r.second_dose,e.totalThirdDose+=r.third_dose,e.totalLastDose+=r.last_dose,e},{totalPlanned:0,totalFirstDose:0,totalSecondDose:0,totalThirdDose:0,totalLastDose:0})}var e=function(t,e){if(void 0!=t){if(e in t)return e;var a=Object.keys(t);return a[a.length-1]}},a=function(t,e,a,r,n){var i=[];for(yearIndex in t)if(!(yearIndex<e||yearIndex>r))for(monthIndex in t[yearIndex])yearIndex==e&&monthIndex<a||yearIndex==r&&monthIndex>n||i.push([yearIndex,monthIndex]);return i};return{createDistrictDataMap:function(t){var e={};for(var a in t){var r=t[a].period,n=t[a].total_first_dose,i=t[a].total_second_dose,o=t[a].total_third_dose,c=t[a].total_last_dose,s=t[a].total_planned,l=t[a].vaccine__name,d=t[a].district__name,u=Number(r.toString().substr(0,4)),g=Number(r.toString().substr(4,6));d in e||(e[d]={}),l in e[d]||(e[d][l]={}),u in e[d][l]||(e[d][l][u]={}),g in e[d][l][u]||(e[d][l][u][g]={}),e[d][l][u][g].first_dose=n,e[d][l][u][g].last_dose=c,e[d][l][u][g].second_dose=i,e[d][l][u][g].third_dose=o,e[d][l][u][g].planned=s}return e},getPeriodList:function(t,r,n){var i=[];if("MCY"==n)i.push([r.toString(),e(t[r],12)]);else if("MFY"==n){var o;(c=r+1)in t?(o=e(t[c],6),i.push([c.toString(),o])):(o=e(t[r],12),i.push([r.toString(),o]))}else if("ACY"==n)i.push.apply(i,a(t,r,1,r,e(t[r],12)));else if("AFY"==n){var c=r+1;c in t?i.push.apply(i,a(t,r,7,c,e(t[c],6))):i.push.apply(i,a(t,r,7,r,e(t[r],12)))}return i},calculateCoverageRate:function(e,a,r){var n=t(e,a),i=n.totalLastDose;return 1==r?i=n.totalFirstDose:2==r?i=n.totalSecondDose:3==r&&(i=n.totalThirdDose),i/n.totalPlanned*100},calculateDropoutRate:function(e,a){var r=t(e,a);return(r.totalFirstDose-r.totalLastDose)/r.totalFirstDose*100},calculateRedCategoryValue:function(e,a){var r=t(e,a),n=r.totalFirstDose/r.totalPlanned*100,i=(r.totalFirstDose-r.totalLastDose)/r.totalFirstDose*100;return n>=90&&i>=0&&i<=10?1:n>=90&&(i<0||i>10)?2:n<90&&i>=0&&i<=10?3:n<90&&(i<0||i>10)?4:0}}}]),window.angular.module("services").service("StockService",["$http",function(t){var e=function(t){return t.data};return{getStockByDistrict:function(a,r,n,i){return t.get("api/stock/athandbydistrict",{params:{startMonth:a,endMonth:r,district:n,vaccine:i}}).then(e)},getStockByMonth:function(a,r,n,i){return t.get("api/stock/athandbymonth",{params:{startMonth:a,endMonth:r,district:n,vaccine:i}}).then(e)},getStockMonthsLeft:function(a,r){return t.get("api/stock/stockmonthsleft",{params:{district:a,vaccine:r}}).then(e)},getStockByDistrictVaccine:function(a,r,n,i){return t.get("/api/stock/stockbydistrictvaccine",{params:{startMonth:a,endMonth:r,district:n,vaccine:i}}).then(e)},getStockedOut:function(a,r,n,i){return t.get("/api/stockedout",{params:{startMonth:a,endMonth:r,district:n,vaccine:i}}).then(e)},getUnepiStock:function(a,r){return t.get("api/stock/athandbydistrict",{params:{endMonth:a,district:r}}).then(e)}}}]),function(t){"use strict";function e(t,e,a,r,n){function i(){d3.selectAll(".nv-multibar .nv-group").each(function(t){var e=d3.select(this);e.selectAll("text").remove(),e.selectAll(".nv-bar").each(function(t){var a=d3.select(this),r=a.attr("width");a.attr("height");e.append("text").attr("transform",a.attr("transform")).text(function(){return parseFloat(t.y).toFixed(0)+"%"}).attr("y",function(){this.getBBox().height;return parseFloat(a.attr("y"))-10}).attr("x",function(){var t=this.getBBox().width;return parseFloat(a.attr("x"))+parseFloat(r)/2-t/2}).attr("class","bar-values")})})}var o=this;t.$on("refreshCoverage3",function(t,r){var n="ALL"==r.antigen?"Antigens":r.antigen,i=r.startYear==r.endYear?r.startYear:r.startYear+" - "+r.endYear;o.chartTitle=n+" Coverage for "+i,d3.selectAll(".nv-multibar .nv-group").each(function(t){d3.select(this).selectAll("text").remove()}),e.getVaccineDosesByPeriod(r).then(function(t){var e=t.reduce(function(t,e){var a=e.vaccine__name,r=e.period.toString().substr(0,4);return-1==o.yearIndexes.indexOf(r)&&o.yearIndexes.push(r),a in t||(t[a]={}),r in t[a]||(t[a][r]={totalActual:0,totalFirstDose:0,totalLastDose:0,totalPlanned:0,totalSecondDose:0}),t[a][r].totalActual+=e.total_actual,t[a][r].totalFirstDose+=e.total_first_dose,t[a][r].totalLastDose+=e.total_last_dose,t[a][r].totalPlanned+=e.total_planned,t[a][r].totalSecondDose+=e.total_second_dose,t},{}),r=[];for(var n in e){var i=[];for(var c in e[n]){var s=a.calculateCoverageRate(e[n][c].totalLastDose,e[n][c].totalPlanned),l=o.yearIndexes.indexOf(c);i.push({x:l,y:s})}r.push({key:n,values:i})}o.chartData=r})}),o.chartOptions={chart:{type:"multiBarChart",height:450,width:650,stacked:!1,showControls:!1,groupSpacing:.2,interactiveLayer:{gravity:"s"},x:function(t){return t.x},y:function(t){return t.y},forceY:[0,110],xAxis:{axisLabel:"Years",tickFormat:function(t){return o.yearIndexes[t]}},yAxis:{axisLabel:"Coverage Rate (%)",ticks:10},dispatch:{renderEnd:function(){i()}}}},o.chartData=[],o.yearIndexes=[],o.exportPDF=r.export,o.initLabels=i}window.angular.module("dashboard").controller("AnnualCoverageController",e),e.$inject=["$scope","CoverageService","CoverageCalculator","ChartPDFExport","$timeout"]}(),function(t){t.module("dashboard").controller("CoverageController",["$scope","$location","StockService","$rootScope","NgTableParams","FilterService","MonthService","CoverageService","MapSupportService",function(e,a,r,n,i,o,c,s,l){var d=this,u=e.$parent;u.child=e,d.path=a.path(),d.endtxt="",d.isLoading=!1,d.activeReportToggle="ACY",d.activeReportYear="CY",d.activeDistrict=void 0,d.sampleDistrictData={},e.isActive=function(t){return t===a.path()},e.updateReportToggle=function(t){d.activeReportToggle=t,d.activeReportYear=d.activeReportToggle.substr(1,2),d.updateMapWithVaccine(d.activeVaccine),setTimeout(function(){window.dispatchEvent(new Event("resize"))},3e3),u.child.chartTitle=d.getChartTitle(d.selectedAntigen)},e.isActiveReportToggle=function(t){return d.activeReportToggle==t},d.getVaccineDoses=function(t,e,a){u.child.hideMap=!0,u.child.mapPlaceholderMessage="Map loading. Please wait...",a="",d.district=a,d.vaccine=e,d.activeVaccine=e,"DPT"!=e&&"ALL"!=e||(d.activeVaccine="PENTA");var r,n=500,i=500;r="/coverage/redcategory"==d.path?function(t,e){return function(t){return 0==(t*=100)?"LightGray":1==t?"DarkGreen":2==t?"Yellow":3==t?"Orange":4==t?"Red":void 0}}:"/coverage/dropoutrate"==d.path?function(t,e){return function(t){return 0==(t*=100)?"LightGray":t>=0&&t<=10?"Green":t>=-10&&t<0||t>10&&t<=20?"Yellow":t<-10||t>20?"Red":void 0}}:function(t,e){return function(t){return 0==(t*=100)?"LightGray":t<50?"Red":t>=50&&t<90?"Yellow":t>=90?"DarkGreen":void 0}};var o=d3.scale.linear().domain([0,100]).interpolate(r);"/coverage/dropoutrate"==d.path?("drop_out_rate",d.endtxt="%"):"/coverage/coverage"==d.path&&("coverage_rate",d.endtxt="%"),"PENTA"==e?(d.vaccine="DPT3",d.vacdose="DPT1-DPT3"):"PCV"==e?(d.vaccine="PCV3",d.vacdose="PCV1-PCV3"):"BCG"==e?(d.vaccine="BCG",d.vacdose="BCG-MEASLES"):"OPV"==e?(d.vaccine="OPV3",d.vacdose="OPV0-OPV3"):"HPV"==e?(d.vaccine="HPV2",d.vacdose="HPV1-HPV2"):"MEASLES"==e?(d.vaccine="MEASLES",d.vacdose="BCG-MEASLES"):"TT"==e&&(d.vaccine="TT2",d.vacdose="TT1-TT2"),u.child.periodMonth=function(t){if(void 0==t)return"";var e=parseInt(t.slice(4,6));return c.getMonthName(e)+" "+t.slice(0,4)}(d.endMonth),u.child.thedose=d.vaccine,u.child.thevacdose=d.vacdose;d3.format(",");var g=d3.geo.mercator().scale(1),h=d3.geo.path().projection(g),p=d3.map(),f={endYear:t,dataType:"map"};s.getVaccineDosesByPeriod(f).then(function(t){var e=l.createDistrictDataMap(t);d.sampleDistrictData=e[Object.keys(e)[0]],p=d3.nest().key(function(t){return t.id}).rollup(function(t){return t[0]}).map(t),d3.json("static/app/components/coverage/data/ug_districts2.geojson",function(t,o){var c=function(t){var e=h.bounds(t),a=.95/Math.max((e[1][0]-e[0][0])/n,(e[1][1]-e[0][1])/i),r=d3.geo.bounds(t);return{scale:a,center:[(r[1][0]+r[0][0])/2,(r[1][1]+r[0][1])/2]}}(o);g.scale(c.scale).center(c.center).translate([n/2,i/2]);for(var s in e)for(var l=s.indexOf(" "),p=s.substring(0,l).toUpperCase(),f=0;f<o.features.length;f++){if(p==o.features[f].properties.dist){o.features[f].properties.field=e[s];break}}d3.select("#map").selectAll("*").remove();var v=d3.select("#map").append("svg").attr("width",n).attr("height",i);v.append("g").attr("class","features"),v.selectAll("path").data(o.features).enter().append("path").attr("d",h).on("mouseover",a).on("mouseout",r).style("cursor","pointer").style("stroke","#777"),d.updateMapWithVaccine(d.activeVaccine),u.child.hideMap=!1,u.child.$apply()});var a=function(t){var e=document.getElementById("tooltip");e.style.left=event.pageX+"px",e.style.top=event.pageY+"px",d3.select(this).style("fill","white"),d3.select("#tooltip").style("opacity",1),d3.select("#tooltip .name").text(t.properties.dist),d3.select("#tooltip .value").text(d3.format(".01f")(d.getDistrictValue(t))+d.endtxt)},r=function(t){d3.select(this).style("fill",d.getFillColor),d3.select("#tooltip").style("opacity",0)}}),d.drawLegend=function(t){d3.select("#gend").selectAll("*").remove();var e=d3.select("#gend").append("svg");e.append("g").attr("class","legendQuant").attr("transform","translate(20,20)");var a=d3.legend.color().labelFormat(d3.format(".2f")).shapeWidth(40).shapeHeight(20);if("/coverage/redcategory"==d.path){var r=function(t,e,a){return t+" ("+e+") ("+(e/a*100).toFixed()+"%)"},n=t.LightGray+t.DarkGreen+t.Yellow+t.Orange+t.Red;a.cells([0,1,2,3,4]).labels([r("No data",t.LightGray,n),r("CAT1",t.DarkGreen,n),r("CAT2",t.Yellow,n),r("CAT3",t.Orange,n),r("CAT4",t.Red,n)])}else"/coverage/dropoutrate"==d.path?a.cells([0,30,15,5]).labels(["No data ("+t.LightGray+")","<-10 & >20 ("+t.Red+")","(-10-0) & (10-20) ("+t.Yellow+")","0-10 ("+t.DarkGreen+")"]):a.cells(4).labels(["No data ("+t.LightGray+")","<50% ("+t.Red+")","50-89% ("+t.Yellow+")",">=90% ("+t.DarkGreen+")"]);a.scale(o),e.select(".legendQuant").call(a)},d.getMapTitle=function(t){var e="A"==d.activeReportToggle[0]?"Annualized":"Monthly",a=d.getLastMapPeriod(),r=appHelpers.generateFullLabelFromPeriod(a[0]+a[1]),n=void 0!=d.activeDose?d.activeDose:t,i="Coverage";return"/coverage/dropoutrate"==d.path?i="Dropout Rate":"/coverage/redcategory"==d.path&&(i="Red Categorization"),e+" "+i+" of "+n+" for "+r},d.updateMapWithVaccine=function(t){"DPT"!=t&&"ALL"!=t||(t="PENTA"),d.activeVaccine=t,u.child.mapTitle=d.getMapTitle(t),colorCounts={Red:0,Yellow:0,DarkGreen:0,LightGray:0,Orange:0};d3.select("#map svg").selectAll("path").style("fill",d.getFillColor),setTimeout(function(){d.drawLegend(colorCounts)},10)},d.getFillColor=function(t){var e=d.getDistrictValue(t),a=o(e);return a?(a in colorCounts&&(colorCounts[a]+=1),a):"LightGray"},d.getLastMapPeriod=function(){var e=d.sampleDistrictData[d.activeVaccine],a=l.getPeriodList(e,t,d.activeReportToggle);return a[a.length-1]},d.getDistrictValue=function(e){var a=e.properties.field;if(void 0==a||!(d.activeVaccine in a))return colorCounts.LightGray+=1,"LightGray";var r=a[d.activeVaccine],n=l.getPeriodList(r,t,d.activeReportToggle);return"/coverage/coverage"==d.path?l.calculateCoverageRate(r,n,d.getActiveDoseNumber()):"/coverage/dropoutrate"==d.path?l.calculateDropoutRate(r,n):"/coverage/redcategory"==d.path?l.calculateRedCategoryValue(r,n):void 0}},d.getRedVaccineDoses=function(e,a,r){r="",d.district=r,d.vaccine=a;var n=500,o=500,c="Red_category";u.child.district=d.district,u.child.vaccine=d.vaccine;var l=d3.format(","),g=d3.geo.mercator().scale(1),h=d3.geo.path().projection(g),p=d3.map(),f=d3.scale.quantize().range(["#008000","#FFFF00","#FFA500","#FF0000"]);s.getRedVaccineDoses(e,a).then(function(e){d.data=t.copy(e),f.domain([d3.min(e,function(t){return+t[c]}),d3.max(e,function(t){return+t[c]})]),p=d3.nest().key(function(t){return t.id}).rollup(function(t){return t[0]}).map(e);d3.select("#legend").attr("class","list-inline").selectAll("li.key").data(f.range()).enter().append("li").attr("class","key").style("border-top-color",String).text(function(t){return"#008000"==t?"CAT1":"#FFFF00"==t?"CAT2":"#FFA500"==t?"CAT3":"#FF0000"==t?"CAT4":void 0}),d3.json("static/app/components/coverage/data/ug_districts2.geojson",function(t,i){var s=function(t){var e=h.bounds(t),a=.95/Math.max((e[1][0]-e[0][0])/n,(e[1][1]-e[0][1])/o),r=d3.geo.bounds(t);return{scale:a,center:[(r[1][0]+r[0][0])/2,(r[1][1]+r[0][1])/2]}}(i);g.scale(s.scale).center(s.center).translate([n/2,o/2]);for(var l=0;l<e.length;l++)for(var d=e[l].district__name,u=d.indexOf(" "),p=d.substring(0,u).toUpperCase(),v=+e[l][c],m=0;m<i.features.length;m++){if(p==i.features[m].properties.dist){i.features[m].properties.field=v;break}}d3.select("#red").selectAll("*").remove();var y=d3.select("#red").append("svg").attr("width",n).attr("height",o);y.append("g").attr("class","features"),y.selectAll("path").data(i.features).enter().append("path").attr("d",h).on("mouseover",a).on("mouseout",r).style("cursor","pointer").style("stroke","#777").style("fill",function(t){var e=t.properties.field;return e?f(e):"#ccc"})});var a=function(t){var e=document.getElementById("tooltip");e.style.left=event.pageX+"px",e.style.top=event.pageY+"px",d3.select(this).style("fill","white"),d3.select("#tooltip").style("opacity",1),d3.select("#tooltip .name").text(t.properties.dist),t.properties.field?d3.select("#tooltip .value").text("CAT"+l(t.properties.field)):d3.select("#tooltip .value").text("No Data")},r=function(t){d3.select(this).style("fill",function(t){var e=t.properties.field;return e?f(e):"#ccc"}),d3.select("#tooltip").style("opacity",0)};tabledataAlldoses=d.data.filter(function(t){return t}),d.tableParamsDoses=new i({page:1,count:10},{filterDelay:0,counts:[],data:tabledataAlldoses})})},d.getVaccineDosesByDistrict=function(e,a,r){s.getVaccineDosesByDistrict(e,a,r).then(function(e){d.data=t.copy(e),u.child.dropedout=0,d.data.length>0&&(u.child.dropedout=d.data[0].drop_out_rate,u.child.underimmunized=d.data[0].under_immunized,d.data[0].access>=90?u.child.access="Good":u.child.access="Poor",u.child.dropedout<=10?u.child.utilization="Good":u.child.utilization="Poor",d.data[0].access>=90&&d.data[0].drop_out_rate<=10?u.redcategory="CAT1":d.data[0].access>=90&&d.data[0].drop_out_rate>10?u.redcategory="CAT2":d.data[0].access<90&&d.data[0].drop_out_rate<=10?u.redcategory="CAT3":d.data[0].access<90&&d.data[0].drop_out_rate>10&&(u.redcategory="CAT4"))})},d.getActiveDoseNumber=function(){return void 0!=d.activeDose?Number(d.activeDose.substr(d.activeDose.length-1,1)):0},d.computeRate=function(t,e){if("/coverage/coverage"==d.path){var a=d.getActiveDoseNumber(),r=t.last;return 1==a?r=t.first:2==a?r=t.second:3==a&&(r=t.third),r/e*100}if("/coverage/dropoutrate"==d.path)return(t.first-t.last)/t.first*100;if("/coverage/redcategory"==d.path){var n=t.first/e*100,i=(t.first-t.last)/t.first*100;return n>=90&&i>=0&&i<=10?1:n>=90&&(i<0||i>10)?2:n<90&&i>=0&&i<=10?3:n<90&&(i<0||i>10)?4:0}},d.getChartData=function(t,e,a,r){var n,i={},o={},c={},s={};for(var l in e){var u=e[l].period,g=e[l].total_last_dose,h=e[l].total_first_dose,p=e[l].total_second_dose,f=e[l].total_third_dose,v=e[l].total_planned,m=e[l].vaccine__name,y=e[l].district__name,D=appHelpers.getMonthFromPeriod(u,a),b=appHelpers.getYearFromPeriod(u,a),F=appHelpers.getYearLabelFromPeriod(u,a),_=appHelpers.getMonthIndexFromPeriod(u,a);if(!("CY"==a&&b>t.endYear)&&!("FY"==a&&b==t.startYear&&D<=6)){if(F in i||(i[F]={},o[F]={},c[F]={},s[F]={}),m in i[F]||(i[F][m]=[],o[F][m]={},c[F][m]={first_dose:0,second_dose:0,third_dose:0,last_dose:0,planned:0},s[F][m]={}),void 0==y||y in s[F][m]||(s[F][m][y]={first_dose:0,last_dose:0,planned:0}),r){if("/coverage/redcategory"==d.path){var C=s[F][m][y].first_dose+h,A=s[F][m][y].last_dose+g,k=s[F][m][y].planned+v;s[F][m][y].first_dose=C,s[F][m][y].last_dose=A,s[F][m][y].planned=k}else{var C=c[F][m].first_dose+h,A=c[F][m].last_dose+g,x=c[F][m].second_dose+p,w=c[F][m].third_dose+f,k=c[F][m].planned+v;c[F][m].first_dose=C,c[F][m].last_dose=A,c[F][m].second_dose=x,c[F][m].third_dose=w,c[F][m].planned=k}n=d.computeRate({first:C,second:x,third:w,last:A},k)}else n=d.computeRate({first:h,second:p,third:f,last:g},v);if("/coverage/redcategory"==d.path){var M=n;_ in o[F][m]||(o[F][m][_]={}),M in o[F][m][_]||(o[F][m][_][M]=[]),o[F][m][_][M].push(y)}else i[F][m].push({x:_,y:d3.format(".01f")(n)})}}var P=[];if("/coverage/redcategory"==d.path){var S=function(t,e,a){return{x:Number(t),y:d3.format(".01f")(e/a*100)}},Y=function(t,e){return t in e?e[t].length:0},L={1:[],2:[],3:[],4:[]};for(var F in o)for(var m in o[F])for(var _ in o[F][m]){var V=o[F][m][_],T=Y(1,V),Q=Y(2,V),N=Y(3,V),R=Y(4,V),$=T+Q+N+R;L[1].push(S(_,T,$)),L[2].push(S(_,Q,$)),L[3].push(S(_,N,$)),L[4].push(S(_,R,$))}P.push({key:"CAT1",color:"DarkGreen",values:d.fillMissingValues(L[1])}),P.push({key:"CAT2",color:"Yellow",values:d.fillMissingValues(L[2])}),P.push({key:"CAT3",color:"Orange",values:d.fillMissingValues(L[3])}),P.push({key:"CAT4",color:"Red",values:d.fillMissingValues(L[4])})}else for(var F in i)for(var m in i[F]){var I=m,B=d.fillMissingValues(i[F][m]);P.push({key:I,values:B})}return P},d.fillMissingValues=function(t){var e=_.range(1,13),a=t.map(function(t){return t.x});return e.filter(function(t){return a.indexOf(t)<0}).forEach(function(e){t.push({x:e,y:0})}),t.sort(function(t,e){return t.x-e.x})},d.getChartOptions=function(t){return{chart:{type:"lineChart",height:450,width:450,useInteractiveGuideline:!0,interactiveLayer:{gravity:"s"},x:function(t){return t.x},y:function(t){return t.y},forceY:[-10,150],dispatch:{stateChange:function(t){console.log("stateChange")},changeState:function(t){console.log("changeState")},tooltipShow:function(t){console.log("tooltipShow")},tooltipHide:function(t){console.log("tooltipHide")}},xAxis:{axisLabel:"Months",tickFormat:function(e){return appHelpers.getMonthFromNumber(e,t)}},yAxis:{axisLabel:"Percentage (%)"},callback:function(t){}}}},d.getChartTitle=function(t){var e="A"==d.activeReportToggle[0]?"Annualized":"Monthly",a=void 0!=d.activeDose?d.activeDose:t;a="ALL"==t?"antigens":a;var r="CY"==d.activeReportYear?"Calendar Year":"Financial year",n=void 0;return n="/coverage/dropoutrate"==d.path?"Dropout Rate":"/coverage/redcategory"==d.path?"Red Categorization":"Coverage","Trend of "+e+" "+n+" of "+a+" for "+d.activeCoverageYear+" "+r},d.getVaccineDosesByPeriod=function(t){s.getVaccineDosesByPeriod(t).then(function(a){e.optionsMCY=d.getChartOptions("CY"),e.optionsACY=d.getChartOptions("CY"),e.optionsMFY=d.getChartOptions("FY"),e.optionsAFY=d.getChartOptions("FY"),e.dataMCY=d.getChartData(t,a,"CY",!1),e.dataACY=d.getChartData(t,a,"CY",!0),e.dataMFY=d.getChartData(t,a,"FY",!1),e.dataAFY=d.getChartData(t,a,"FY",!0),u.child.chartTitle=d.getChartTitle(d.selectedAntigen)})},d.enablePDFDownload=function(){u.child.downloadPDF=function(){d3.selectAll("svg .nv-line").style("fill","#ffffff").style("fill-opacity",0),d3.selectAll(".nvd3 .nv-background").style("fill","#ffffff").style("fill-opacity",0),d3.selectAll(".nvd3 .nv-axis line").style("stroke","#e5e5e5"),d3.selectAll(".nvd3 text").style("font","normal 13px Arial, sans-serif"),d3.selectAll(".nvd3 .nv-groups .nv-point").style("fill-opacity",0).style("stroke-width","0px"),d3.selectAll(".nvd3 .nv-axis .zero line").style("stroke","#404040"),d3.selectAll(".nv-y .nv-axis g path.domain").style("stroke","#404040"),d3.selectAll(".legendQuant .label").style("font","normal 12px Arial, sans-serif");var t=new jsPDF("l","mm");t.addHTML(document.getElementById("pdfReport"),0,0,{format:"PNG"},function(){t.save("coverage-report.pdf")})}},e.$on("refreshCoverage2",function(t,e,a,r,n,i,o,c){if("vm"in t.currentScope){d.activeDistrict=c,d.activeDose=o,d.activeStartYear=a,d.activeEndYear=r,d.selectedAntigen=i,d.activeCoverageYear=n;var s=0;"/coverage/redcategory"==d.path&&(s=1),d.enablePDFDownload(),d.getVaccineDosesByDistrict(e.period,c,i),d.getVaccineDosesByPeriod({startYear:n,endYear:n,antigen:i,dose:o,district:c,enableDistrictGrouping:s}),n!=d.lastEndYear?d.getVaccineDoses(n,i,c):d.updateMapWithVaccine(i),d.lastEndYear=n}})}]).directive("reportYearToggles",function(){return{templateUrl:"static/app/components/coverage/report-year-toggles.html"}})}(window.angular),function(t){t.module("dashboard").controller("FridgeController",["$scope","FridgeService","$rootScope","NgTableParams","FilterService",function(e,a,r,n,i){var o=this,c=e.$parent;c.child=e,o.getFridgeAllDistrictCapacity=function(e,r,i,s){o.startQuarter=o.startQuarter?o.startQuarter:"201601",o.endQuarter=o.endQuarter?o.endQuarter:"201604",i="",o.carelevel=s,a.getFridgeDistrictCapacity(e,r,i,s).then(function(e){o.data=t.copy(e),tabledataAlldistricts=o.data.filter(function(t){return t}),o.tableParamsCapacityAlldistricts=new n({page:1,count:10},{filterDelay:0,counts:[],data:tabledataAlldistricts});var r=a.getFridgeCapacityMetrics(o.data);c.child.usurp=r.surplus,c.child.usufficient=r.sufficient,c.child.ushortage=r.shortage})},o.getFridgeDistrictCapacity=function(e,r,n,i){o.startQuarter&&o.startQuarter,o.endQuarter=o.endQuarter?o.endQuarter:"201604",district="",o.fridgeDistrict=n,o.carelevel=i,a.getFridgeDistrictCapacity(e,r,n,i).then(function(e){o.data=t.copy(e),c.child.fridgeDistrict=district;var a=[],r=[],n=[],i=[];c.child.available=0;for(var s=0;s<o.data.length;s++)r.push([o.data[s].quarter.slice(0,4)+"-Q"+o.data[s].quarter.slice(5,6),o.data[s].required]),n.push([o.data[s].quarter.slice(0,4)+"-Q"+o.data[s].quarter.slice(5,6),o.data[s].available]),i.push([o.data[s].quarter.slice(0,4)+"-Q"+o.data[s].quarter.slice(5,6),o.data[s].gap]),o.data[s].quarter&&(c.child.available=o.data[s].available);a.push({key:"Required",values:r,color:"#2A448A"}),a.push({key:"Available",values:n,color:"green"}),o.graph=a,o.options={chart:{type:"multiBarChart",height:450,margin:{top:20,right:20,bottom:45,left:45},clipEdge:!0,stacked:!0,x:function(t){return t[0]},y:function(t){return t[1]},showValues:!0,showYAxis:!1}}})},o.getFridgeFacilityCapacity=function(e,r,i,s){o.startQuarter&&o.startQuarter,o.endQuarter=o.endQuarter?o.endQuarter:"201604",district="",o.district=i,o.carelevel=s,a.getFridgeFacilityCapacity(e,r,i,s).then(function(e){o.data=t.copy(e),o.tableParams_f=new n({page:1,count:15},{filterDelay:0,counts:[],data:o.data}),c.child.fridgeDistrict=o.fridgeDistrict,c.child.carelevel=o.carelevel;var r=a.getFridgeCapacityMetrics(o.data);c.child.utsurp=r.surplus/r.total*100,c.child.utsufficient=r.sufficient/r.total*100,c.child.utshortage=r.shortage/r.total*100})},o.getFridgeAllDistrictRefrigerator=function(e,r,i,c){o.startQuarter=o.startQuarter?o.startQuarter:"201601",o.endQuarter=o.endQuarter?o.endQuarter:"201604",i="",o.fridgeDistrict=i,o.carelevel=c,a.getFridgeDistrictRefrigerator(e,r,i,c).then(function(e){o.data=t.copy(e),tabledataAlldistricts=o.data.filter(function(t){return t}),o.tableParamsFunctionalityAlldistricts=new n({page:1,count:10},{filterDelay:0,counts:[],data:tabledataAlldistricts})})},o.getFridgeDistrictRefrigerator=function(e,r,i,s){o.startQuarter=o.startQuarter?o.startQuarter:"201601",o.endQuarter=o.endQuarter?o.endQuarter:"201604",district="",o.carelevel=s,a.getFridgeDistrictRefrigerator(e,r,i,s).then(function(e){o.data=t.copy(e),tabledataAlldistricts=o.data.filter(function(t){return t}),o.tableParamsAlldistricts=new n({page:1,count:10},{filterDelay:0,counts:[],data:tabledataAlldistricts}),o.tableParams_d=new n({page:1,count:15},{filterDelay:0,counts:[],data:o.data});var a=[],r=[],i=[],s=[];c.child.functionality=0,c.child.fridgeDistrict=district;for(var l=0;l<o.data.length;l++)r.push([o.data[l].quarter.slice(0,4)+"-Q"+o.data[l].quarter.slice(5,6),o.data[l].number_existing]),i.push([o.data[l].quarter.slice(0,4)+"-Q"+o.data[l].quarter.slice(5,6),o.data[l].not_working]),s.push([o.data[l].quarter.slice(0,4)+"-Q"+o.data[l].quarter.slice(5,6),o.data[l].needs_maintenance]),o.data[l].quarter&&(c.child.functionality=(o.data[l].number_existing-o.data[l].not_working)/o.data[l].number_existing*100);a.push({key:"Existing",values:r,color:"green"}),a.push({key:"Not Working",values:i,color:"#2A448A"}),a.push({key:"Needs maintenance",values:s,color:"red"}),o.graphfunctionality=a,o.optionsfunctionality={chart:{type:"multiBarChart",height:450,margin:{top:20,right:20,bottom:45,left:45},showControls:!1,clipEdge:!0,stacked:!0,x:function(t){return t[0]},y:function(t){return t[1]},showValues:!0,showYAxis:!1}}})},o.getFridgeFacilityRefrigerator=function(e,r,i,s){o.startQuarter&&o.startQuarter,o.endQuarter=o.endQuarter?o.endQuarter:"201604",district="",o.district=i,o.carelevel=s,a.getFridgeFacilityRefrigerator(e,r,i,s).then(function(e){o.data=t.copy(e),tabledataAllfacilities=o.data.filter(function(t){return t}),o.tableParamsAllfacilities=new n({page:1,count:10},{filterDelay:0,counts:[],data:tabledataAllfacilities}),o.tableParams_f=new n({page:1,count:15},{filterDelay:0,counts:[],data:o.data}),c.child.fridgeDistrict=o.fridgeDistrict,c.child.carelevel=o.carelevel})},o.getFridgeAllDistrictImmunizingFacility=function(e,r,i,c){o.startQuarter=o.startQuarter?o.startQuarter:"201601",o.endQuarter=o.endQuarter?o.endQuarter:"201604",i="",o.carelevel=c,a.getFridgeDistrictImmunizingFacility(e,r,i,c).then(function(e){o.data=t.copy(e),allData=tabledataAlldistricts=o.data.filter(function(t){return t}),o.tableParamsImmunizingAlldistricts=new n({page:1,count:10},{filterDelay:0,counts:[],data:tabledataAlldistricts})})},o.getFridgeDistrictImmunizingFacility=function(e,r,i,s){o.startQuarter&&o.startQuarter,o.endQuarter=r.name,district="",o.district=i,o.carelevel=s,a.getFridgeDistrictImmunizingFacility(e,r,i,s).then(function(e){o.data=t.copy(e),tabledataAllfridge=o.data.filter(function(t){return t}),o.tableParamsAllfridge=new n({page:1,count:10},{filterDelay:0,counts:[],data:tabledataAllfridge}),o.tableParams_d=new n({page:1,count:15},{filterDelay:0,counts:[],data:o.data}),c.child.fridgeDistrict=district,c.child.quarter=r.name-2;for(var a=0;a<o.data.length;a++){var i=o.data[a].immunizing,s=o.data[a].Total_facilities-o.data[a].immunizing;c.child.facility=o.data[a].immunizing}o.optionsimmunizing={chart:{type:"pieChart",height:500,width:500,x:function(t){return t.key},y:function(t){return t.y},showLabels:!0,duration:500,labelThreshold:.01,labelSunbeamLayout:!0,legend:{margin:{top:5,right:35,bottom:5,left:0}}}},o.graphimmunizing=[{key:"Immunizing",y:i,color:"green"},{key:"Not Immunizing",y:s,color:"#2A448A"}]})},e.$on("refreshCapacity",function(t,e,a,r,n){e&&a&&r.district&&(o.getFridgeDistrictRefrigerator(e,a,r.district,n.group),o.getFridgeAllDistrictRefrigerator(e,a,r.district,n.group),o.getFridgeFacilityRefrigerator(e,a,r.district,n.group),o.getFridgeAllDistrictImmunizingFacility(e,a,r.district,n.group),o.getFridgeDistrictImmunizingFacility(e,a,r.district,n.group),o.getFridgeAllDistrictCapacity(e,a,r.district,n.group),o.getFridgeDistrictCapacity(e,a,r.district,n.group),o.getFridgeFacilityCapacity(e,a,r.district,n.group))})}])}(window.angular),function(t){t.module("dashboard").controller("PlanningController",["$scope","AnnualService","$rootScope","NgTableParams","FilterService",function(e,a,r,n,i){var o=this;e.$parent.child=e,o.getFundActivities=function(e){e="",o.year=e,a.getFundActivities(e).then(function(e){var a=[],r=[];o.data=t.copy(e),a=o.data.filter(function(t){return 1==t.fund}),r=o.data.filter(function(t){return 0==t.fund}),tabledatafund=o.data.filter(function(t){return t}),o.tableParamsfunded=new n({page:1,count:15},{filterDelay:0,counts:[],data:tabledatafund});for(var i=0,c=0,s=0;s<o.data.length;s++)1==o.data[s].fund?i++:0==o.data[s].fund&&c++;o.fundactivity={chart:{type:"pieChart",height:500,width:500,x:function(t){return t.key},y:function(t){return t.y},showLabels:!0,duration:500,labelThreshold:.01,labelSunbeamLayout:!0,legend:{margin:{top:5,right:35,bottom:5,left:0}}}},i==o.data.length?o.graphfundedactivities=[]:(o.tableParams_funded=new n({page:1,count:15},{filterDelay:0,counts:[],data:a}),o.tableParams_unfunded=new n({page:1,count:15},{filterDelay:0,counts:[],data:r}),o.graphfundedactivities=[{key:"Funded",y:i/o.data.length*100,color:"green"},{key:"Unfunded Activities",y:c/o.data.length*100,color:"red"}])})},o.getPriorityActivities=function(e){e="",o.year=e,a.getPriorityActivities(e).then(function(e){var a=[],r=[];o.data=t.copy(e),a=o.data.filter(function(t){return 1==t.fund}),r=o.data.filter(function(t){return 0==t.fund}),funded==o.data.length?o.graphfundedactivities=[]:(o.tableParams_priorityfund=new n({page:1,count:15},{filterDelay:0,counts:[],data:a}),o.tableParams_priorityunfunded=new n({page:1,count:15},{filterDelay:0,counts:[],data:r}));for(var i=[],c=[],s=[],l=[],d=[],u=[],g=[],h=[],p=0;p<o.data.length;p++)1==o.data[p].fund?(s.push([o.data[p].area,o.data[p].High]),l.push([o.data[p].area,o.data[p].Medium]),d.push([o.data[p].area,o.data[p].Low])):(u.push([o.data[p].area,o.data[p].High]),g.push([o.data[p].area,o.data[p].Medium]),h.push([o.data[p].area,o.data[p].Low]));i.push({key:"HIGH",values:s,color:"#2A448A"}),i.push({key:"MEDIUM",values:l,color:"green"}),i.push({key:"LOW",values:d,color:"yellow"}),o.prioritygraph=i,o.priorityoptions={chart:{type:"multiBarChart",height:450,width:500,clipEdge:!0,stacked:!0,x:function(t){return t[0]},y:function(t){return t[1]},showValues:!0,showYAxis:!0,showXAxis:!0,rotateLabels:55}},c.push({key:"HIGH",values:u,color:"#2A448A"}),c.push({key:"MEDIUM",values:g,color:"green"}),c.push({key:"LOW",values:h,color:"yellow"}),o.prioritygraphun=c,o.priorityoptionsun={chart:{type:"multiBarChart",height:450,width:500,clipEdge:!0,stacked:!0,x:function(t){return t[0]},y:function(t){return t[1]},showValues:!0,showYAxis:!0,showXAxis:!0,rotateLabels:55}}})},e.$on("refreshAwp",function(t,e){e.year&&(o.getFundActivities(e.year),o.getPriorityActivities(e.year))})}])}(window.angular),function(t){t.module("dashboard").controller("StockController",["$scope","StockService","$rootScope","NgTableParams","FilterService","MonthService","$location","ChartSupportService","ChartPDFExport","$timeout",function(e,a,r,n,i,o,c,s,l,d){var u=this,g=e.$parent;g.child=e,u.exportPDF=l.export,g.child.isActive=function(t){return t===c.path()},u.SortByKey=function(t,e){return t.sort(function(t,a){var r=t[e],n=a[e];return r<n?-1:r>n?1:0})},u.getStockByDistrict=function(e,r,i,c){u.startMonth&&u.startMonth,u.endMonth=u.endMonth?u.endMonth:"",i="",u.district="",u.vaccine=u.selectedVaccine?u.selectedVaccine.name:"",a.getStockByDistrict(e,r,i,c).then(function(e){var a=[],i=[],s=[],l=[],d=[];u.data=t.copy(e),a=u.data.filter(function(t){return 0==t.at_hand}),l=u.data.filter(function(t){return t.at_hand>t.stock_requirement__maximum}),s=u.data.filter(function(t){return t.at_hand>t.stock_requirement__minimum&&t.at_hand<t.stock_requirement__maximum}),i=u.data.filter(function(t){return t.at_hand<t.stock_requirement__minimum&&t.at_hand>0}),d=u.data.filter(function(t){return t}),tabledataAlldistricts=u.data.filter(function(t){return t}),u.tableParamsAlldistricts=new n({page:1,count:10},{filterDelay:0,counts:[],data:tabledataAlldistricts});for(var h=0,p=0,f=0,v=0,m="",y=0;y<u.data.length;y++)0==u.data[y].at_hand?(h++,m="Stocked Out"):u.data[y].at_hand>u.data[y].stock_requirement__minimum&&u.data[y].at_hand<u.data[y].stock_requirement__maximum?(p++,m="Within Range"):u.data[y].at_hand<u.data[y].stock_requirement__minimum&&u.data[y].at_hand>0?(f++,m="Below MIN"):u.data[y].at_hand>u.data[y].stock_requirement__maximum&&(v++,m="Above MAX"),u.data[y].status=m;g.child.stockedout=h/u.data.length*100;var D=new Date(o.monthToDate(r));D.setMonth(D.getMonth()-1),g.child.themonth=D,g.child.vaccine=c,u.options={chart:{type:"pieChart",height:500,width:500,x:function(t){return t.key},y:function(t){return t.y},showLabels:!0,duration:500,labelThreshold:.01,labelSunbeamLayout:!0,legend:{margin:{top:5,right:35,bottom:5,left:0}}}},h==u.data.length?u.graph=[]:(u.tableParams_so=new n({page:1,count:10},{filterDelay:0,counts:[],data:a}),u.tableParams_bm=new n({page:1,count:10},{filterDelay:0,counts:[],data:i}),u.tableParams_wr=new n({page:1,count:10},{filterDelay:0,counts:[],data:s}),u.tableParams_am=new n({page:1,count:10},{filterDelay:0,counts:[],data:l}),u.tableParams_search=new n({page:1,count:10},{filterDelay:0,counts:[],data:d}),u.graph=[{key:"Stocked Out",y:h/u.data.length*100,color:"#FF0000"},{key:"Within Range",y:p/u.data.length*100,color:"#FFFF00"},{key:"Below MIN",y:f/u.data.length*100,color:"#FFA500"},{key:"Above MAX",y:v/u.data.length*100,color:"#008000"}])})},u.getStockByDistrictVaccine=function(e,r,i,c){u.startMonth&&u.startMonth,u.endMonth=u.endMonth?u.endMonth:"Dec 2016",u.district=i,u.vaccine=c,a.getStockByDistrictVaccine(e,r,i,c).then(function(e){u.data=t.copy(e),u.tableParams=new n({page:1,count:15},{filterDelay:0,counts:[],data:u.data}),g.child.district=u.district,g.child.vaccine=u.vaccine;var a=[],i=[],c=[],s=[],l=[];g.child.refreshrate=0;for(f=0;f<u.data.length;f++)i.push([u.data[f].month,parseInt(u.data[f].received)]),c.push([u.data[f].month,u.data[f].ordered]),s.push([u.data[f].month,u.data[f].stock_requirement__minimum]),l.push([u.data[f].month,u.data[f].stock_requirement__maximum]),u.data[f].month==o.getMonthNumber(r.split(" ")[0])&&(g.child.refreshrate=0==u.data[f].ordered?0:u.data[f].received/u.data[f].ordered*100);a.push({key:"Min",values:s,color:"#A5E816"}),a.push({key:"Issued",values:i,color:"#1F77B4"}),a.push({key:"Ordered",values:c,color:"red"}),a.push({key:"Max",values:l,color:"#FF7F0E"}),u.graphDistribution=a,u.optionsDistribution={chart:{type:"lineChart",height:500,width:500,title:{enable:!0,text:"Abim"},showLegend:!0,stacked:!0,showControls:!0,margin:{top:20,right:20,bottom:85,left:65},forceY:[0,100],staggerLabels:!0,x:function(t){return t[0]},y:function(t){return t[1]},xAxis:{axisLabel:"Months",tickFormat:function(t){return o.getMonthName(t)},axisLabelDistance:10},useInteractiveGuideline:!0,dispatch:{stateChange:function(t){console.log("stateChange")},changeState:function(t){console.log("changeState")},tooltipShow:function(t){console.log("tooltipShow")},tooltipHide:function(t){console.log("tooltipHide")}},showValues:!0,valueFormat:function(t){return tickFormat(d3.format(",.1f"))},transitionDuration:500}};var d=[],h=[],p=[];g.child.coverage=0;for(var f=0;f<u.data.length;f++)h.push([u.data[f].month,u.data[f].consumed]),p.push([u.data[f].month,u.data[f].stock_requirement__target]),u.data[f].month==o.getMonthNumber(r.split(" ")[0])&&(g.child.coverage=0==u.data[f].stock_requirement__target?0:u.data[f].consumed/u.data[f].stock_requirement__target*100);d.push({key:"Actual Consumption",values:h}),d.push({key:"Planned consumption",values:p,color:"#FF7F0E"}),u.graphConsumption=d,u.optionsConsumption={chart:{type:"lineChart",height:500,width:500,title:{enable:!0,text:"Abim"},showLegend:!0,stacked:!0,showControls:!0,margin:{top:20,right:20,bottom:85,left:65},forceY:[0,100],staggerLabels:!0,x:function(t){return t[0]},y:function(t){return t[1]},xAxis:{axisLabel:"Months",tickFormat:function(t){return o.getMonthName(t)},axisLabelDistance:10},useInteractiveGuideline:!0,dispatch:{stateChange:function(t){console.log("stateChange")},changeState:function(t){console.log("changeState")},tooltipShow:function(t){console.log("tooltipShow")},tooltipHide:function(t){console.log("tooltipHide")}},showValues:!0,valueFormat:function(t){return tickFormat(d3.format(",.1f"))},transitionDuration:500}}})},e.$on("refresh",function(t,e,a,r,n){e.name&&a.name&&r.name&&n.name&&(u.getStockByDistrict(e.name,a.name,r.name,n.name),u.getStockByDistrictVaccine(e.name,a.name,r.name,n.name))})}])}(window.angular),function(t){"use strict";function e(e,a,r,n,i,o){function c(){n.clearLabels(),o(function(){n.initLabels(),d3.selectAll(".nv-multibar g").attr("clip-path","")},1e3)}var s=this,l=e.$parent;l.child=e,l.child.uptake=0,s.exportPDF=i.export,s.optionsUptake=function(){var t=n.getOptions("multiChart");return t.chart.color=["green","DodgerBlue","red","white"],t.chart.width=900,t.chart.margin={left:70,top:70},t.chart.legend.width=900,t.chart.xAxis.axisLabel="Months",t.chart.yAxis.axisLabel="",t.chart.xAxis.tickFormat=function(t){return appHelpers.getMonthFromNumber(t,"CY")},t.chart.valueFormat=function(t){return tickFormat(d3.format(".0f"))},t.chart.legend.dispatch.stateChange=function(){c()},t}(),e.$on("refresh",function(e,n,i,o,d){a.getStockByDistrictVaccine(n.name,i.name,o.name,d.name).then(function(e){s.data=t.copy(e);var a=[],n=[],o=[],d=[],u=[],g=0;l.child.uptake="0";for(var h=0;h<s.data.length;h++){var p=s.data[h];if(5!=p.period.toString().length){var f=appHelpers.getMonthIndexFromPeriod(p.period,"CY"),v=void 0==p.at_hand?p.total_at_hand:p.at_hand,m=void 0==p.received?p.total_received:p.received,y=void 0==p.consumed?p.total_consumed:p.consumed,D=void 0==p.stock_requirement__target?p.total_target:p.stock_requirement__target,b=v+m;g=Math.max(g,Number(D.toFixed(0))),n.push({x:f,y:Number(b.toFixed(0))}),o.push({x:f,y:Number(y.toFixed(0))}),d.push({x:f,y:Number(D.toFixed(0))}),u.push({x:f,y:0}),s.data[h].month==r.getMonthNumber(i.name.split(" ")[0])&&(l.child.uptake=0==m&&0==v?0:Math.round(y/b*100))}}a.push({key:"Available Stock",type:"bar",yAxis:1,values:n}),a.push({key:"Children Immunised",type:"bar",yAxis:1,values:o}),a.push({key:"Monthly Targets",type:"line",yAxis:1,values:d}),a.push({key:"",type:"line",yAxis:1,strokeWidth:0,values:u}),s.graphUptake=a,s.maxMonthlyTarget=g,c()})})}t.module("dashboard").controller("StockUptakeController",e),e.$inject=["$scope","StockService","MonthService","ChartSupportService","ChartPDFExport","$timeout"]}(window.angular),function(t){function e(e,a,r,n,i,o){var c=this;c.exportPDF=i.export,c.graphOptions=function(){var t=n.getOptions("multiBarChart");return t.chart.color=["green","DodgerBlue"],t.chart.width=900,t.chart.margin={left:70,top:70},t.chart.legend.width=900,t.chart.xAxis.axisLabel="Months",t.chart.yAxis.axisLabel="",t.chart.xAxis.tickFormat=function(t){return appHelpers.getMonthFromNumber(t,"CY")},t.chart.valueFormat=function(t){return tickFormat(d3.format(".0f"))},t}(),c.graphData=[],e.$on("refresh",function(e,r,n,i,o){a.getStockByDistrictVaccine(r.name,n.name,i.name,o.name).then(function(e){c.data=t.copy(e);for(var a=[],r=[],n=[],i=0;i<c.data.length;i++){var o=c.data[i];if(5!=o.period.toString().length){var s=appHelpers.getMonthIndexFromPeriod(o.period,"CY"),l=void 0==o.at_hand?o.total_at_hand:o.at_hand,d=void 0==o.received?o.total_received:o.received;r.push({x:s,y:Number(l.toFixed(0))}),n.push({x:s,y:Number(d.toFixed(0))})}}a.push({key:"Stock Balance",values:r}),a.push({key:"Supply By NMS",values:n}),c.graphData=a})})}t.module("dashboard").controller("StockoutTrendController",e),e.$inject=["$scope","StockService","MonthService","ChartSupportService","ChartPDFExport","$timeout"]}(window.angular),function(t){t.module("dashboard").controller("UnepiController",["$scope","CoverageService","StockService","MonthService","$rootScope","NgTableParams","FilterService","FridgeService","CoverageCalculator","$timeout",function(e,a,r,n,i,o,c,s,l,d){var u=this,g=e.$parent;g.child=e,u.getUnepiCoverage=function(t,e,r){var i={period:t,district:e},c=function(t,e,a){return t.reduce(function(t,r){return r.vaccine__name==a?t+r[e]:t},0)};a.getVaccineDosesByPeriod(i).then(function(a){var r=[],i=0,s=0;g.child.district=e,g.child.Gap=0,g.child.dropout_Penta=0,g.child.dropout_hpv=0,g.child.category=0,g.child.periodMonth=function(t){var e=parseInt(t.slice(4,6));return n.getMonthName(e)+" "+t.slice(0,4)}(t);for(var d in a){var h=a[d].period,p=a[d].total_last_dose,f=a[d].total_first_dose,v=(a[d].total_second_dose,a[d].total_planned),m=a[d].vaccine__name;if(h==t){var y=c(a,"total_last_dose",m),D=c(a,"total_planned",m),b=l.calculateCoverageRate(p,v),F=l.calculateDropoutRate(f,p),_=l.calculateRedCategory(f,p,v),C=l.calculateCoverageRate(y,D);switch(r.push({vaccine:m,planned_consumption:v,coverage_rate:b,avoc:C}),m){case"PENTA":i=b,g.child.dropout_Penta=F,g.child.category=_;break;case"PCV":s=b;break;case"HPV":g.child.dropout_hpv=F}}}g.child.Gap=i-s;var A={filterDelay:0,counts:[],data:r};u.tableParamsDoses=new o({page:1,count:10},A)})},u.getUnepiNationalStock=function(t,e){r.getUnepiStock(t,e).then(function(t){var e=[],a=0,r=t.reduce(function(t,e){return e.vaccine in t||(t[e.vaccine]={at_hand:0,stock_requirement__minimum:0,received:0,ordered:0,consumed:0,available_stock:0}),t[e.vaccine].at_hand+=e.at_hand,t[e.vaccine].stock_requirement__minimum+=e.stock_requirement__minimum,t[e.vaccine].received+=e.received,t[e.vaccine].ordered+=e.ordered,t[e.vaccine].consumed+=e.consumed,t[e.vaccine].available_stock+=e.available_stock,t},{});for(var n in r){var i=r[n].at_hand,c=r[n].stock_requirement__minimum,s=r[n].ordered,l=r[n].received,d=r[n].consumed,h=i+l,p=Math.round(i/c);0==p&&a++,e.push({vaccine:n,Months_stock:p,Refill_rate:0==s?0:Math.round(l/s*100),uptake_rate:0==h?0:Math.round(d/h*100)})}g.child.Antigen_stockedout=a;var f={filterDelay:0,counts:[],data:e};u.tableParamsStock=new o({page:1,count:10},f)})},u.getUnepiStock=function(e,a){u.endMonth=u.endMonth?u.endMonth:"",r.getUnepiStock(e,a).then(function(e){var a=[];u.data=t.copy(e),a=u.data.filter(function(t){return t}),u.tableParamsStock=new o({page:1,count:10},{filterDelay:0,counts:[],data:a}),g.child.Antigen_stockedout=0;for(var r=0;r<u.data.length;r++)0==u.data[r].Months_stock&&g.child.Antigen_stockedout++})},u.parseDistrict=function(t){return t.replace(" District","").toUpperCase()},u.getUnepiColdChainCapacity=function(t,e){e=u.parseDistrict(e),s.getFridgeFacilityCapacity(void 0,t,e,void 0).then(function(t){var e=s.getFridgeCapacityMetrics(t);g.child.metrics=e,g.child.per=appHelpers.per})},u.getUnepiColdChainFunctionality=function(t,e){e=u.parseDistrict(e),s.getFridgeDistrictRefrigerator(void 0,t,e,void 0).then(function(t){var e=t.reduce(function(t,e){return t.totalEquipment+=e.number_existing,t.totalWorkingWell+=e.working_well,t.totalNotWorkingWell+=e.not_working,t.totalNeedMaintenance+=e.needs_maintenance,t.totalFacilities+=e.total_facilities,t},{totalEquipment:0,totalFacilities:0,totalWorkingWell:0,totalNotWorkingWell:0,totalNeedMaintenance:0});g.child.numberOfColdchainEquipment=e.totalEquipment,g.child.numberOfFacilities=e.totalFacilities,g.child.numberWorkingWell=e.totalWorkingWell,g.child.numberNotWorkingWell=e.totalNotWorkingWell,g.child.numberNeedMaintenance=e.totalNeedMaintenance,g.child.per=appHelpers.per,g.child.numberWorking=e.totalEquipment-e.totalNotWorkingWell})},u.enablePDFDownload=function(){g.child.downloadPDF=function(){g.child.printView=!0,d(function(){var t=new jsPDF("p","mm");t.addHTML(document.getElementById("unepiReport"),function(){t.save("unepi-report.pdf")})},100),d(function(){g.child.printView=!1},1e3)}},e.$on("refresh",function(t,e,a,r,n){e.name&&a.name&&r.name&&n.name&&(u.getUnepiCoverage(a.period,r.name,n.name),"National"==r.name?u.getUnepiNationalStock(a.name,r.name,n.name):u.getUnepiStock(a.name,r.name,n.name),u.getUnepiColdChainCapacity(a.name,r.name),u.getUnepiColdChainFunctionality(a.name,r.name),u.enablePDFDownload())})}])}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
